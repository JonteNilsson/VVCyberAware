@page "/segment/{id:int}"
@attribute [Authorize]

@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity
@using System.Security.Claims
@using VVCyberAware.Components.CustomComponents
@using VVCyberAware.Data
@using VVCyberAware.Shared.Models.ApiModels
@using VVCyberAware.Shared.Models.DbModels
@using VVCyberAware.Shared.Models.Services.CategoryService
@using VVCyberAware.Shared.Models.Services.QuestionService
@using VVCyberAware.Shared.Models.Services.SegmentService
@using VVCyberAware.Shared.Models.Services.SubCategoryService
@using VVCyberAware.Shared.Models.ViewModels
@inject ICategoryService categoryService
@inject ISegmentService segmentService
@inject IQuestionService questionService;
@inject ISubCService subCService;
@rendermode InteractiveServer

@inject UserManager<ApplicationUser> UserManager
@inject IHttpContextAccessor HttpContextAccessor


@if (segment == null)
{
    <h1>Segment not found!</h1>
}
else
{
    <div class="main-container text-white  ">
        @*<h1 class="text-center">@(segment.Category.Name == null ? "Ingen Kategori" : segment.Category.Name)</h1> *@
        @if(categories != null){
            <h1 class="text-center">@categories.First(c => c.Id == segment.CategoryId).Name</h1>
        }
        else
        {
            <h1 class="text-center">Unknown</h1>
        }

        <div class="segment-container">
            <h1>@segment.Name</h1>

            @if(subCategories != null)
            {
                @foreach(var sub in subCategories.Where(s=>s.SegmentId == segment.Id))
                {
                    <h3>@sub.Description</h3>
                    @if (questions != null)
                    {
                        @foreach (var question in questions.Where(q => q.SubCategoryId == sub.Id).ToList())
                        {
                            var selectedAnswer = selectedAnswers.GetValueOrDefault(question.Id);
                            var correctAnswer = GetCorrectAnswer(question.Id);
                            bool isCorrect = selectedAnswer != null && selectedAnswer == correctAnswer;

                            <div class="question-box ">
                                <form>
                                    <p class="font-weight-bold">@question.QuestionText</p>

                                    @for (int i = 0; i < question.Answers.Count(); i++)
                                    {
                                        var answer = question.Answers.ElementAt(i);

                                        <div class="form-check">
                                            <input 
                                                class="form-check-input" type="radio" 
                                                id="@($"QuestionRadio_{question.Id}_{i}")" 
                                                name="@($"QuestionRadio_{question.Id}")"
                                                value="@answer.Key"
                                                @onchange="() => HandleRadioValueChanged(question.Id, answer.Key)">
                                            <label class="form-check-label" for="@($"QuestionRadio_{question.Id}_{i}")">@answer.Key</label>
                                        </div>
                                    }
                                    <br \>
                                    @if (!isCorrect && submitPressed)
                                    {
                                        <ion-icon style="color:darkred; font-size:4em" name="close-outline"></ion-icon>
                                    }
                                    else if(isCorrect && submitPressed)
                                    {
                                            <ion-icon style="color:forestgreen; font-size:4em" name="checkmark-outline"></ion-icon>
                                    }
                                    @if (submitPressed || segment.UserIsComplete.Contains(userId))
                                    {
                                        <div class="edit-container p-3">
                                            <label>Förklaring: </label>
                                            <p>Rätt svar är: "@GetCorrectAnswer(question.Id)"</p>
										    <p>@question.Explanation</p>
									    </div>
                                    }
                                </form>
                            </div>
                        }
                    }
                }
            }
            @if (submitPressed)
            {
                <p>@correctCount / @questionsToAnswer.Count rätt svar!</p>
            }
            @if (correctCount == questionsToAnswer.Count && submitPressed)
            {
                <p>Grattis! Du kan nu gå tillbaka till home! (TIPS: Läs förklaringen på de frågor du var osäker på!)</p>
            }
            else if(submitPressed){
                <p>Du hade några fel, gå tillbaka och läs förklaringarna på de som är fel, när du är klar klicka submit igen för att spara!</p>
            }

			<div class="d-flex justify-content-center mb-5  ">
				<button class="btn btn-primary me-3" @onclick="Submit" disabled="@(!AllQuestionsAnswered)">Submit</button>
				<a href="/home" class="btn btn-danger">Tillbaka</a>
			</div>
        </div>
		    
    </div>
}

@code {
    [Parameter]
    public int Id { get; set; }

    private List<CategoryApiModel>? categories;
    private SegmentApiModel? segment;
    private List<SubCategoryApiModel>? subCategories;
    private List<QuestionApiModel>? questions;
    private Dictionary<int, string> selectedAnswers = new Dictionary<int, string>();
    private List<QuestionApiModel>? subQuestions;
    private bool AllQuestionsAnswered;
    List<QuestionApiModel> questionsToAnswer = new List<QuestionApiModel>();
    int correctCount;

    private string userId;
    private bool submitPressed = false;

    private void HandleRadioValueChanged(int questionId, string selectedAnswer)
    {
        if (selectedAnswers.ContainsKey(questionId))
        {
            selectedAnswers[questionId] = selectedAnswer;
        }
        else
        {
            selectedAnswers.Add(questionId, selectedAnswer);
        }
        AllQuestionsAnswered = AllQuestionsAnsweredCheck();
    }

    private bool AllQuestionsAnsweredCheck()
    {
        foreach (var question in questionsToAnswer)
        {
            if (!selectedAnswers.ContainsKey(question.Id))
            {
                return false;
            }
        }
        return true;
    }

    private async Task Submit()
    {
        submitPressed = true;
        correctCount = 0;

        foreach (var question in questionsToAnswer)
        {
            var selectedAnswer = selectedAnswers.GetValueOrDefault(question.Id);
            if (selectedAnswer != null && selectedAnswer == GetCorrectAnswer(question.Id))
            {
                correctCount++;
            }
        }

        if (correctCount == questionsToAnswer.Count)
        {
            segment.UserIsComplete.Add(userId);
            SegmentViewModel updatedSegment = new()
                {
                    CategoryId = segment.CategoryId,
                    Id = segment.Id,
                    Name = segment.Name,
                    UserIsComplete = segment.UserIsComplete
                };
            await segmentService.UpdateSegmentAsync(segment.Id, updatedSegment);
        }

    }

    private string? GetCorrectAnswer(int questionId)
    {
        var questionToCheck = questions.FirstOrDefault(q => q.Id == questionId);
        if(questionToCheck != null)
        {
            foreach (var answer in questionToCheck.Answers)
            {
                if (answer.Value)
                {
                    return answer.Key;
                }
            }
        }
        return null;

    }

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();

        categories = await categoryService.GetAllCategoriesAsync();
        segment = await segmentService.GetSegmentByIdAsync(Id);
        subCategories = await subCService.GetSubCategoriesAsync();
        questions = await questionService.GetQuestionsAsync();

        List<SubCategoryApiModel> subCategoriesToAnswer = subCategories.Where(s => s.SegmentId == Id).ToList();
        foreach (var sub in subCategoriesToAnswer)
        {
            questionsToAnswer.AddRange(questions.Where(q => q.SubCategoryId == sub.Id)); //AddRange can add an entire list to another
        }
        var httpContext = HttpContextAccessor.HttpContext;
        if(httpContext != null)
        {
            userId = httpContext.User.FindFirst(ClaimTypes.NameIdentifier)?.Value;
        }
        
    }
}


