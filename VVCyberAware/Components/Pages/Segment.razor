@page "/segment/{id:int}"
@attribute [Authorize]

@using Microsoft.AspNetCore.Authorization
@using VVCyberAware.Shared.Models.ApiModels
@using VVCyberAware.Shared.Models.DbModels
@using VVCyberAware.Shared.Models.Services.QuestionService
@using VVCyberAware.Shared.Models.Services.SegmentService
@using VVCyberAware.Shared.Models.Services.SubCategoryService
@inject ISegmentService segmentService
@inject IQuestionService questionService;
@inject ISubCService subCService;


@if (segment == null)
{
    <h1>Segment not found!</h1>
}
else
{
    <div class="main-container">
@*         <h1 class="text-center">@(segment.Category.Name == null ? "Ingen Kategori" : segment.Category.Name)</h1> *@
        <h1 class="text-center">@segment.Category.Name</h1>


        <div class="segment-container">
	    <h1>@segment.Name</h1>
        @foreach(var sub in subCategories.Where(s=>s.SegmentId == segment.Id))
        {
            <h3>@sub.Description</h3>
            @foreach (var question in questions.FindAll(q => q.SubCategoryId == sub.Id).ToList())
            {
                <div class="question-box">
                    <form>
                        <p class="font-weight-bold">@question.QuestionText</p>
                        @for (int i = 0; i < question.Answers.Count(); i++)
                        {
                            <div class="form-check">
                                <input class="form-check-input" type="radio" name="Question">
                                <label class="form-check-label" for="Question">
                                    @question.Answers.ElementAt(i).Key
                                </label>
                            </div>
                        }
				    </form>
			    </div>
            }
        }
        <button class="btn btn-primary" >Submit</button>
        </div>
    
    </div>
}

@code {
    [Parameter]
    public int Id { get; set; }
    private SegmentModel? segment;
    private List<SubCategoryModel>? subCategories;
    private List<QuestionModel>? questions;

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        segment = await segmentService.GetSegmentByIdAsync(Id);
        subCategories = await subCService.GetSubCategoriesAsync();
        questions = await questionService.GetQuestionsAsync();

    }
}


