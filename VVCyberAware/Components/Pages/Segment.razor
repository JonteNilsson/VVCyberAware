@page "/segment/{id:int}"
@attribute [Authorize]

@using Microsoft.AspNetCore.Authorization
@using VVCyberAware.Components.CustomComponents
@using VVCyberAware.Shared.Models.ApiModels
@using VVCyberAware.Shared.Models.DbModels
@using VVCyberAware.Shared.Models.Services.CategoryService
@using VVCyberAware.Shared.Models.Services.QuestionService
@using VVCyberAware.Shared.Models.Services.SegmentService
@using VVCyberAware.Shared.Models.Services.SubCategoryService
@inject ICategoryService categoryService
@inject ISegmentService segmentService
@inject IQuestionService questionService;
@inject ISubCService subCService;


@if (segment == null)
{
    <h1>Segment not found!</h1>
}
else
{
    <div class="main-container">
@*         <h1 class="text-center">@(segment.Category.Name == null ? "Ingen Kategori" : segment.Category.Name)</h1> *@
        @if(categories != null){
            <h1 class="text-center">@categories.First(c => c.Id == segment.CategoryId).Name</h1>
        }
        else
        {
            <h1 class="text-center">Unknown</h1>
        }
        <div class="segment-container">
	    <h1>@segment.Name</h1>

        @if(subCategories != null)
        {
            @foreach(var sub in subCategories.Where(s=>s.SegmentId == segment.Id))
            {
                <h3>@sub.Description</h3>
                @if (questions != null)
                {
                    @foreach (var question in questions.FindAll(q => q.SubCategoryId == sub.Id).ToList())
                    {
                        <QuestionComponent Question="question"/>
                    }
                }
            }
        }
        <button class="btn btn-primary">Submit</button>
        </div>
    
    </div>
}

@code {
    [Parameter]
    public int Id { get; set; }

    private List<CategoryApiModel>? categories;
    private SegmentApiModel? segment;
    private List<SubCategoryApiModel>? subCategories;
    private List<QuestionApiModel>? questions;

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();

        categories = await categoryService.GetAllCategoriesAsync();
        segment = await segmentService.GetSegmentByIdAsync(Id);
        subCategories = await subCService.GetSubCategoriesAsync();
        questions = await questionService.GetQuestionsAsync();

    }
}


