@page "/segment/{id:int}"
@attribute [Authorize]

@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity
@using VVCyberAware.Components.CustomComponents
@using VVCyberAware.Data
@using VVCyberAware.Shared.Models.ApiModels
@using VVCyberAware.Shared.Models.DbModels
@using VVCyberAware.Shared.Models.Services.CategoryService
@using VVCyberAware.Shared.Models.Services.QuestionService
@using VVCyberAware.Shared.Models.Services.SegmentService
@using VVCyberAware.Shared.Models.Services.SubCategoryService
@inject ICategoryService categoryService
@inject ISegmentService segmentService
@inject IQuestionService questionService;
@inject ISubCService subCService;
@rendermode InteractiveServer

@inject UserManager<ApplicationUser> UserManager
@inject IHttpContextAccessor HttpContextAccessor


@if (segment == null)
{
    <h1>Segment not found!</h1>
}
else
{
    <div class="main-container">
@*         <h1 class="text-center">@(segment.Category.Name == null ? "Ingen Kategori" : segment.Category.Name)</h1> *@
        @if(categories != null){
            <h1 class="text-center">@categories.First(c => c.Id == segment.CategoryId).Name</h1>
        }
        else
        {
            <h1 class="text-center">Unknown</h1>
        }
        <div class="segment-container">
	    <h1>@segment.Name</h1>

        @if(subCategories != null)
        {
            @foreach(var sub in subCategories.Where(s=>s.SegmentId == segment.Id))
            {
                <h3>@sub.Description</h3>
                @if (questions != null)
                {
                    @foreach (var question in questions.FindAll(q => q.SubCategoryId == sub.Id).ToList())
                    {
                            <QuestionComponent Question="question" @onAnswerSelected="HandleAnswerSelected"/>
                    }
                }
            }
        }
        <button class="btn btn-primary" @onclick="Submit">Submit</button>
          
      </div>
      <div class="d-flex justify-content-center mb-5 ">
      <a href="/home" class="btn btn-danger" >Back</a>
      </div>
    </div>
}

@code {
    [Parameter]
    public int Id { get; set; }

    private List<CategoryApiModel>? categories;
    private SegmentApiModel? segment;
    private List<SubCategoryApiModel>? subCategories;
    private List<QuestionApiModel>? questions;
    private Dictionary<int, string> selectedAnswers = new Dictionary<int, string>();

    private void Submit()
    {
        foreach (var (questionId, selectedAnswer) in selectedAnswers)
        {
            Console.WriteLine($"Question ID: {questionId}, Selected Answer: {selectedAnswer}");
        }
    }

    private void HandleAnswerSelected((int questionId, string selectedAnswer) answerInfo)
    {
        int questionId = answerInfo.questionId;
        string selectedAnswer = answerInfo.selectedAnswer;

        // Retrieve the correct answer for the given questionId
        var correctAnswer = GetCorrectAnswer(questionId);

        // Check if the selected answer matches the correct answer
        bool isCorrect = selectedAnswer == correctAnswer;

        // Now you have both questionId and selectedAnswer here
        Console.WriteLine($"Question ID: {questionId}, Selected Answer: {selectedAnswer}, Correct: {isCorrect}");

        // Save the result, for example:
        if (!isCorrect)
        {
            SaveIncorrectAnswer(questionId, selectedAnswer);
        }
    }

    private string GetCorrectAnswer(int questionId)
    {
        return "";
    }

    private void SaveIncorrectAnswer(int questionId, string selectedAnswer)
    {
        // Implement logic to save the incorrect answer, for example, in a list or database
        // Here you can store the questionId and selectedAnswer in a suitable data structure
        // For the sake of example, assuming you have a list to store incorrect answers
        List<(int questionId, string selectedAnswer)> incorrectAnswers = new List<(int, string)>();
        incorrectAnswers.Add((questionId, selectedAnswer));
    }

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();

        categories = await categoryService.GetAllCategoriesAsync();
        segment = await segmentService.GetSegmentByIdAsync(Id);
        subCategories = await subCService.GetSubCategoriesAsync();
        questions = await questionService.GetQuestionsAsync();

    }
}


