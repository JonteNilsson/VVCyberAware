@page "/admin/edit/{Component}/{Id:int?}"

@using VVCyberAware.Components.CustomComponents
@using VVCyberAware.Shared.Models.ApiModels
@using VVCyberAware.Shared.Models.Services.CategoryService
@using VVCyberAware.Shared.Models.Services.SegmentService
@using VVCyberAware.Shared.Models.Services.SubCategoryService
@using VVCyberAware.Shared.Models.Services.QuestionService
@inject ICategoryService categoryService
@inject ISegmentService segmentService
@inject ISubCService subCService
@inject IQuestionService questionService

<AuthorizeView Roles="Admin">
    <Authorized>
		<div class="row text-center header">
			@if (Id.HasValue)
			{
				<h1 class="text-center col-10">Editing @Component</h1>
			}
			else
			{
				<h1 class="text-center col-10">Add new @Component</h1>
			}
        </div>
		@if(Component != null)
		{
			<div class="edit-container">
				@if (Component.ToLower() == "category")
				{
					<div class="row w-75">
						<div class="col-12">
							<label>Name: </label>
							@if (category != null)
							{
								<input type="text" value="@category.Name" />
							}
							else
							{
								<input type="text" value="" />
							}
						</div>
						<div class="col-12">
							<label>Description: </label>
							@if (category != null)
							{
								<input type="text" value="@category.Description" />
							}
							else
							{
								<input type="text" value="" />
							}
						</div>
					</div>
				}
				else if (Component.ToLower() == "segment")
				{
					<div class="row w-75">
						<div class="col-12">
							<label>Name: </label>
							@if (category != null)
							{
								<input type="text" value="@segment.Name" />
							}
							else
							{
								<input type="text" value="" />
							}
								
						</div>
					</div>
				}
				else if (Component.ToLower() == "subcategory")
				{
					<div class="row w-75">
						<div class="col-12">
							<label>Description: </label>
							@if (category != null)
							{
								<input type="text" value="@subCategory.Description" />
							}
							else
							{
								<input type="text" value="" />
							}
								
						</div>
					</div>
				}
				else if (Component.ToLower() == "question")
				{
					
					<div class="row w-75">
						<div class="col-12">
							<label>Name:</label>
							<div class="question-box">
							@if (question != null)
							{
								<InputTextArea @bind-Value="@question.QuestionText" class="question-text-input" placeholder="Skriv in din fråga här..." />
								@for (int i = 0; i < question.Answers.Count(); i++)
								{
									<div class="form-check">
										<input class="form-check-input" type="radio" name="Question">
										<input class="form-check-label" type="text" for="Question" value="@question.Answers.ElementAt(i).Key" />
									</div>
								}
								<input type="text" class="font-weight-bold" value="@question.Explanation" />
							}
							</div>
						</div>
						<input type="text" value="" />
					</div>
				}
				else
				{
					<h3>404 No component found with name @Component</h3>
				}

			</div>
		}
		

    </Authorized>
    <NotAuthorized>
        <h4>You are not authorized to view this page.</h4>
    </NotAuthorized>
</AuthorizeView>

@code {
	[Parameter]
	public string Component { get; set; } = null!;
	[Parameter]
	public int? Id { get; set; }

	private CategoryApiModel? category;
	private SegmentApiModel? segment;
	private SubCategoryApiModel? subCategory;
	private QuestionApiModel? question;

	protected async override Task OnParametersSetAsync()
	{
		await base.OnParametersSetAsync();
		if (Id.HasValue)
		{
			switch (Component.ToLower())
			{
				case "category":
					var categories = await categoryService.GetAllCategoriesAsync();
					category = categories.FirstOrDefault(c => c.Id == Id);
					break;
				case "segment":
					var segments = await segmentService.GetSegmentsAsync();
					segment = segments.FirstOrDefault(c => c.Id == Id);
					break;
				case "subcategory":
					var subCategories = await subCService.GetSubCategoriesAsync();
					subCategory = subCategories.FirstOrDefault(c => c.Id == Id);
					break;
				case "question":
					var questions = await questionService.GetQuestionsAsync();
					question = questions.FirstOrDefault(c => c.Id == Id);
					break;
				default:
					Component = "";
					break;
			}
		}
	}
}