@page "/admin/edit/{Component}/{Id:int?}"

@using Blazored.LocalStorage
@using System.ComponentModel.DataAnnotations
@using VVCyberAware.Components.CustomComponents
@using VVCyberAware.Shared.Models.ApiModels
@using VVCyberAware.Shared.Models.Services.CategoryService
@using VVCyberAware.Shared.Models.Services.SegmentService
@using VVCyberAware.Shared.Models.Services.SubCategoryService
@using VVCyberAware.Shared.Models.Services.QuestionService
@using VVCyberAware.Shared.Models.ViewModels
@inject ICategoryService categoryService
@inject ISegmentService segmentService
@inject ISubCService subCService
@inject IQuestionService questionService
@inject NavigationManager NavigationManager
@inject ILocalStorageService localStorage
@rendermode InteractiveServer

<AuthorizeView Roles="Admin" Context="authContext"> 
    <Authorized>
		<div class="row text-center header">
			@if (Id.HasValue)
			{
				<h1 class="text-center col-12">Editing @Component</h1>
			}
			else
			{
				<h1 class="text-center col-12">Add new @Component</h1>
			}
        </div>
		@if(Component != null)
		{
			<div class="flex-center">
				@if (Component.ToLower() == "category")
				{
					<div class="row w-50 flex-center edit-container p-3">
						<div>
							<label class="font-weight-bold">Name: </label>
							@if (category != null)
							{
								<input class="w-100" type="text" value="@category.Name" />
							}
							else
							{
								<input class="w-100" type="text" @bind="@newCategory.Name" />
							}
						</div>
						<div>
							<label class="font-weight-bold mt-4">Description: </label>
							@if (category != null)
							{
								<input class="w-100" type="text" value="@category.Description" />
							}
							else
							{
								<input class ="w-100" type="text" @bind="@newCategory.Description" />
							}
						</div>
					</div>
				}
				else if (Component.ToLower() == "segment")
				{
					<div class="row w-50 flex-center edit-container p-3">
						<div>
							<label class="font-weight-bold">Name: </label>
							@if (segment != null)
							{
								<input class="w-100" type="text" value="@segment.Name" />
							}
							else
							{
								<input class="w-100" type="text" @bind="@newSegment.Name" />
							}
						</div>
					</div>
				}
				else if (Component.ToLower() == "subcategory")
				{
					<div class="row w-50 flex-center edit-container p-3">
						<div>
							<label class="font-weight-bold">Name: </label>
							@if (subCategory != null)
							{
								<input class="w-100" type="text" value="@subCategory.Description" />
							}
							else
							{
								<input class="w-100" type="text" @bind="@newSubCategory.Description" />
							}
						</div>
					</div>
				}
				else if (Component.ToLower() == "question")
				{
					<div class="row w-50 flex-center p-3">
						<EditForm class="flex-center" Model="@questionFormModel">
							<div class="question-box">
								<label><strong>Fråga: </strong></label>
								<InputTextArea class="question-text-input mb-3" @bind-Value="@questionFormModel.QuestionText" placeholder="Skriv in din fråga här..." />
								
								@foreach (var answer in questionFormModel.Answers)
								{
									<div class="form-check">
										<input class="form-check-input" type="radio" name="Question" @onchange="() => UpdateSelectedAnswer(answer)" checked="@answer.Answer" />
										<InputText class="form-check-label w-75" @bind-Value="answer.AnswerText" placeholder="Skriv in svarsalternativ..." />
									</div>
								}

								<div class="mt-3">
									<button class="btn btn-primary" @onclick="AddOption">Lägg till alternativ</button>
									<button class="btn btn-primary" disabled="@(optionCounter <= 2 ? true : false)" @onclick="RemoveOption">Ta bort sista alternativet</button>
								</div>

								<label class="mt-3"><strong>Förklaring: </strong></label>
								<InputTextArea class="question-text-input" @bind-Value="questionFormModel.Explanation" placeholder="Skriv in din förklaring här..." />
							</div>
						</EditForm>
					</div>
				}
				else
				{
					<h3>404 No component found with name @Component</h3>
				}

			</div>
			<div class="flex-center">
				<button class="btn btn-warning btn-outline-dark me-2" @onclick="@(()=> PostPut())">@(Id.HasValue ? "Uppdatera" : "Lägg till")
				</button>
				<button class="btn btn-danger btn-outline-dark ms-2">Avbryt</button>
			</div>
			
		}
		

    </Authorized>
    <NotAuthorized>
        <h4>You are not authorized to view this page.</h4>
    </NotAuthorized>
</AuthorizeView>

@code {
	[Parameter]
	public string Component { get; set; } = null!;
	[Parameter]
	public int? Id { get; set; }

	private CategoryApiModel? category;
	private SegmentApiModel? segment;
	private SubCategoryApiModel? subCategory;
	private QuestionApiModel? question;

	private string newQuestionText = "";
	private string newQuestionExplination = "";
	private List<AnswerData> newAnswers = new();
	private int optionCounter = 0;

	private QuestionFormModel questionFormModel = new();
	private CategoryViewModel newCategory = new()
		{
			Description = "",
			Name = ""
		};
	private SegmentViewModel newSegment = new()
		{
			Name = ""
		};
	private SubCategoryViewModel newSubCategory = new()
		{
			Description = ""
	};

	private void AddOption()
	{
		questionFormModel.Answers.Add(new AnswerData
			{
				AnswerText = "",
				Answer = false
			});
		optionCounter++;
	}

	private void RemoveOption()
	{

		questionFormModel.Answers.RemoveAt(questionFormModel.Answers.Count - 1);

		optionCounter--;
	}

	private void UpdateSelectedAnswer(AnswerData selectedAnswer)
	{
		foreach (var answer in questionFormModel.Answers)
		{
			answer.Answer = answer == selectedAnswer;
		}
	}

	private async Task PostPut()
	{
		if (Component.ToLower() == "category")
		{
			if (Id.HasValue == true)
			{
				// PUT category
			}
			else
			{
				await categoryService.PostCategory(newCategory);

			}
		}

		else if (Component.ToLower() == "segment")
		{

			if (Id.HasValue == true)
			{
				// PUT Segment

			}
			else
			{
				newSegment.CategoryId = await localStorage.GetItemAsync<int>("id");
				newSegment.UserIsComplete = new();
				await segmentService.PostSegment(newSegment);
			}

		}
		else if (Component.ToLower() == "subcategory")
		{
			if (Id.HasValue)
			{
				// Put subcategory
			}
			else
			{
				newSubCategory.SegmentId = await localStorage.GetItemAsync<int>("id");
				await subCService.PostSubCategory(newSubCategory);
			}

		}
		else if (Component.ToLower() == "question")
		{
			if (Id.HasValue)
			{
				//Put Question 
			}
			else
			{

				Dictionary<string, bool> newAnswersDict = new();
				try
				{
					foreach (var answer in questionFormModel.Answers)
					{
						newAnswersDict.Add(answer.AnswerText, answer.Answer);
					}
				}
				catch (Exception e)
				{
					throw new Exception(e.Message);
				}
				QuestionViewModel newQuestion = new()
					{
							QuestionText = questionFormModel.QuestionText,
							Explanation = questionFormModel.Explanation,
							SubCategoryId = await localStorage.GetItemAsync<int>("id"),
							Answers = newAnswersDict
					};

				await questionService.PostQuestion(newQuestion);
				// Post question 
			}
		}
		if (Component.ToLower() == "category" || (Component.ToLower() == "segment" && !Id.HasValue))
		{
			NavigationManager.NavigateTo("/admin");
		}
		else if ((Component.ToLower() == "segment" && Id.HasValue) || Component.ToLower() == "subcategory" || Component.ToLower() == "question")
		{
			NavigationManager.NavigateTo($"/admin/segment/{await localStorage.GetItemAsync<int>("id")}");
		}
		else
		{
			//Should not get here if using the app, but maybe if typing in the url
			NavigationManager.NavigateTo("/home");
		}

	}

	protected async override Task OnParametersSetAsync()
	{
		await base.OnParametersSetAsync();
		if (Id.HasValue)
		{
			switch (Component.ToLower())
			{
				case "category":
					var categories = await categoryService.GetAllCategoriesAsync();
					category = categories.FirstOrDefault(c => c.Id == Id);
					break;
				case "segment":
					var segments = await segmentService.GetSegmentsAsync();
					segment = segments.FirstOrDefault(c => c.Id == Id);
					break;
				case "subcategory":
					var subCategories = await subCService.GetSubCategoriesAsync();
					subCategory = subCategories.FirstOrDefault(c => c.Id == Id);
					break;
				case "question":
					var questions = await questionService.GetQuestionsAsync();
					question = questions.FirstOrDefault(c => c.Id == Id);
					if (question != null)
					{
						questionFormModel.QuestionText = question.QuestionText;
						questionFormModel.Explanation = question.Explanation;
						questionFormModel.Answers = question.Answers.Select(dict => new AnswerData
							{
								AnswerText = dict.Key,
								Answer = dict.Value
							}).ToList();
						optionCounter = question.Answers.Count;
					}
					break;
				default:
					Component = "";
					break;
			}
		}
		else
		{
			questionFormModel.Answers.Add(new AnswerData
				{
					AnswerText = "",
					Answer = false
				});
			questionFormModel.Answers.Add(new AnswerData
				{
					AnswerText = "",
					Answer = false
				});
			optionCounter = 2;
		}
	}

	public class AnswerData
	{
		public string AnswerText { get; set; }
		public bool Answer { get; set; }
	}

	public class QuestionFormModel
	{
		[Required(ErrorMessage = "Name is required")]
		public string QuestionText { get; set; }
		public List<AnswerData> Answers { get; set; }
		public string Explanation { get; set; }

		public QuestionFormModel()
		{
			Answers = new List<AnswerData>();
		}
	}
}