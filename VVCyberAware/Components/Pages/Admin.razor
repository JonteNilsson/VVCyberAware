@page "/admin"
 
@attribute [Authorize]

@using Microsoft.AspNetCore.Authorization
@using VVCyberAware.Components.CustomComponents
@using VVCyberAware.Shared.Models.ApiModels
@using VVCyberAware.Shared.Models.DbModels
@using VVCyberAware.Shared.Models.Services.CategoryService
@using VVCyberAware.Shared.Models.Services.SegmentService

@inject ICategoryService categoryService
@inject ISegmentService segmentService
@rendermode InteractiveServer

<AuthorizeView Roles="Admin">
    <Authorized>

		<div class="row text-center header">
			<h1 class="text-center col-10">Welcome to the Admin Page!</h1>
            <span class="row col-2">
                <label>Sök: </label><input type="text" @oninput="(i) => Search(i.Value.ToString())" />
            </span>
        </div>

        @if (!Id.HasValue)
        {
            @if(categories != null)
            {
                <ul class="list-group">
                @foreach (var category in categories)
                {
                    if(category.Name.ToLower().Contains(searchText.ToLower()))
                    {
                        <AdminCategoryComponent Category="category"
                                           Segments="@segments"
                                           ToggleInfo="@ToggleInfo"
                                           IsCategoryVisible="@IsCategoryVisible" />
                    }
                }
                </ul>

                <button class="btn btn-success">Lägg till kategori</button>
            }
        }
        
    </Authorized>
    <NotAuthorized>
        <h4>You are not authorized to view this page.</h4>
    </NotAuthorized>
</AuthorizeView>

@code {
    [Parameter]
    public int? Id { get; set; }

    private string arrowDirection = "down"; // Note: Change to down for the other arrow
    private Dictionary<int, bool> categoryVisibility = new Dictionary<int, bool>();
    private string searchText = "";
    private List<CategoryApiModel> categories;
    private List<SegmentApiModel> segments;

    private void Search(string search) => searchText = search;

    private void ToggleInfo(int id)
    {
        categoryVisibility[id] = !categoryVisibility[id];

        arrowDirection = categoryVisibility[id] ? "up" : "down";
    }
    private bool IsCategoryVisible(int categoryId)
    {
        return categoryVisibility.ContainsKey(categoryId) && categoryVisibility[categoryId];
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        categories = await categoryService.GetCategoriesAsync();
        segments = await segmentService.GetSegmentsAsync();

        foreach (var category in categories)
        {
            categoryVisibility.Add(category.Id, false);
        }
    }
}
