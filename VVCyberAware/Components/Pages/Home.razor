@page "/home"
@attribute [Authorize]
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Server
@using System.Security.Claims
@using Microsoft.AspNetCore.Identity
@using VVCyberAware.Components.Account
@using VVCyberAware.Components.CustomComponents
@using VVCyberAware.Data
@using VVCyberAware.Shared.Models.ApiModels
@using VVCyberAware.Shared.Models.DbModels
@using VVCyberAware.Shared.Models.Services.CategoryService
@using VVCyberAware.Shared.Models.Services.SegmentService
@using VVCyberAware.Shared.Models.ViewModels
@inject ICategoryService categoryService
@inject ISegmentService segmentService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager navigationManager
@inject IdentityRedirectManager RedirectManager
@inject SignInManager<ApplicationUser> signInManager
@rendermode InteractiveServer

<PageTitle>Home</PageTitle>
<div class="row text-center header">
	<h1 class="col-10">Kategorier:</h1>
    <span class="row col-2">
		<label>SÃ¶k: </label><input type="text" @oninput="(i) => Search(i.Value.ToString())" />
	</span>
    <div class="d-flex justify-content-left ">

        <form action="Account/Logout" method="post">
            <AntiforgeryToken />
            <input type="hidden" name="ReturnUrl" value="@currentUrl" />
            <button type="submit" class="nav-link">
                <span class="bi bi-arrow-bar-left-nav-menu" aria-hidden="true"></span> Logout
            </button>
        </form>
    </div>
</div>

@if(categories != null)
{
    <ul class="list-group">
        @foreach (var category in categories)
        {
            if(category.Name.ToLower().Contains(searchText.ToLower()))
            {
                <CategoryComponent Category="category"
                                   Segments="@segments"
                                   ToggleInfo="@ToggleInfo"
                                   IsCategoryVisible="@IsCategoryVisible" />
            }
        }
    </ul>

}


@code {
    private string? currentUrl;
    private string arrowDirection = "down"; // Note: Change to down for the other arrow
    private Dictionary<int, bool> categoryVisibility = new Dictionary<int, bool>();
    private string searchText = "";

    private List<CategoryApiModel>? categories;
    private List<SegmentApiModel>? segments;

    private void ToggleInfo(int id)
    {
        categoryVisibility[id] = !categoryVisibility[id];

        arrowDirection = categoryVisibility[id] ? "up" : "down";
    }

    private bool IsCategoryVisible(int categoryId)
    {
        return categoryVisibility.ContainsKey(categoryId) && categoryVisibility[categoryId];
    }

    private void Search(string search) => searchText = search;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        currentUrl = navigationManager.ToBaseRelativePath(navigationManager.Uri);

        categories = await categoryService.GetAllCategoriesAsync();
        segments = await segmentService.GetSegmentsAsync();

        foreach (var category in categories)
        {
            categoryVisibility.Add(category.Id, false);
        }
    }
}

