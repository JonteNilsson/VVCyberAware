@page "/home"
@attribute [Authorize]
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Server
@using System.Security.Claims
@using VVCyberAware.Components.CustomComponents
@using VVCyberAware.Shared.Models.ApiModels
@using VVCyberAware.Shared.Models.DbModels
@using VVCyberAware.Shared.Models.Services.CategoryService
@using VVCyberAware.Shared.Models.Services.SegmentService
@using VVCyberAware.Shared.Models.ViewModels
@inject ICategoryService categoryService
@inject ISegmentService segmentService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager navigationManager
@rendermode InteractiveServer

<PageTitle>Home</PageTitle>
<div class="row text-center header">
	<h1 class="col-10 white-text ">Kategorier</h1>
    <span class="row col-2 ">
		<label class =" white-text" >SÃ¶k: </label><input type="text" @oninput="(i) => Search(i.Value.ToString())" />
	</span>
    <div class="d-flex justify-content-left ">
        <a class="btn btn-danger" @onclick="Logout">Log out</a>
    </div>
</div>

@if(categories != null)
{
    <ul class="list-group transparent-box ">
        @foreach (var category in categories)
        {
            if(category.Name.ToLower().Contains(searchText.ToLower()))
            {
                <CategoryComponent Category="category"
                                   Segments="@segments"
                                   ToggleInfo="@ToggleInfo"
                                   IsCategoryVisible="@IsCategoryVisible" />
            }
        }
    </ul>

}


@code {
    private string arrowDirection = "down"; // Note: Change to down for the other arrow
    private Dictionary<int, bool> categoryVisibility = new Dictionary<int, bool>();
    private string searchText = "";

    private List<CategoryApiModel>? categories;
    private List<SegmentApiModel>? segments;

    private void ToggleInfo(int id)
    {
        categoryVisibility[id] = !categoryVisibility[id];

        arrowDirection = categoryVisibility[id] ? "up" : "down";
    }

    private bool IsCategoryVisible(int categoryId)
    {
        return categoryVisibility.ContainsKey(categoryId) && categoryVisibility[categoryId];
    }

    private async Task Logout()
    {
        var state = await AuthenticationStateProvider.GetAuthenticationStateAsync();

        var authStateProvider = (ServerAuthenticationStateProvider)AuthenticationStateProvider;

        authStateProvider.SetAuthenticationState(Task.FromResult(new AuthenticationState(new ClaimsPrincipal())));

        navigationManager.NavigateTo("/");
    }

    private void Search(string search) => searchText = search;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        categories = await categoryService.GetAllCategoriesAsync();
        segments = await segmentService.GetSegmentsAsync();

        foreach (var category in categories)
        {
            categoryVisibility.Add(category.Id, false);
        }
    }
}

