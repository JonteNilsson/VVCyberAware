@using Microsoft.AspNetCore.Identity
@using System.Security.Claims
@using VVCyberAware.Components.Pages
@using VVCyberAware.Data
@using VVCyberAware.Shared.Models.ApiModels
@using VVCyberAware.Shared.Models.DbModels
@using static VVCyberAware.Components.Pages.Home

@inject UserManager<ApplicationUser> UserManager
@inject IHttpContextAccessor HttpContextAccessor

@if(Category != null)
{
    <li class="list-group-item transparent-box ">

        <div class="d-flex justify-content-between align-items-center category-header" @onclick="(e) => ToggleInfo(Category.Id)">
            <h3 class="category-title not-selectable">@Category.Name (@procent % avklarat)</h3>
            <ion-icon class="arrow-icon" name="arrow-@(IsCategoryVisible(Category.Id) ? "up" : "down")"></ion-icon>
        </div>

        @if (IsCategoryVisible(Category.Id))
        {
            <div class="dropdown-content">
                <p class="category-text">@Category.Description</p>
                <ul class="list-group">
                    @foreach (var segment in Segments.Where(s=>s.CategoryId == Category.Id))
                    {
                        <CategorySegment Segment="@segment" SegmentDone="@(segment.UserIsComplete.Contains(userId))" />
                    }
                </ul>
            </div>
        }
    </li>
}

@code {
    [Parameter]
    public CategoryApiModel? Category { get; set; }
    [Parameter]
    public List<SegmentApiModel>? Segments { get; set; }
    [Parameter]
    public Action<int>? ToggleInfo { get; set; }
    [Parameter]
    public Func<int, bool>? IsCategoryVisible { get; set; }

    private int procent;
    private HttpContext httpContext;
    private string userId;

    private int calculateProcent(int categoryId)
    {
        var categorySegments = Segments.Where(s => s.CategoryId == categoryId).ToList();
        int totalSegments = categorySegments.Count;
        int completedSegments = 0;

        if (httpContext != null)
        {
            foreach (var segment in categorySegments)
            {
                if (segment.UserIsComplete.Contains(userId))
                {
                    completedSegments++;
                }
            }
        }

        if (totalSegments != 0)
        {
            return (int)Math.Floor((completedSegments / (double)totalSegments) * 100);
        }
        else
        {
            return 0;
        }
    }

    protected async override Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();

        httpContext = HttpContextAccessor.HttpContext;
        if(httpContext != null)
        {
            userId = httpContext.User.FindFirst(ClaimTypes.NameIdentifier)?.Value;
        }
        
        procent = calculateProcent(Category.Id);
    }
}
