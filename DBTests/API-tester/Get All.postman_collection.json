{
	"info": {
		"_postman_id": "c23112b6-d8fd-4269-9357-15896f35db10",
		"name": "Get All",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "33865868"
	},
	"item": [
		{
			"name": "https://localhost:7214/api/Question/Questions Get all",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Response status code is 200', function () {",
							"    pm.response.to.have.status(200);",
							"})",
							"",
							"pm.test('Id is a non-negative integer', function () {",
							"    const responseData = pm.response.json();",
							"    responseData.forEach(function (question) {",
							"        pm.expect(question.id).to.be.a('number');",
							"        pm.expect(question.id).to.be.at.least(0);",
							"    });",
							"})",
							"",
							"pm.test('Verify that questionText is a non-empty string', function () {",
							"    const responseData = pm.response.json();",
							"    pm.expect(responseData).to.be.an('array');",
							"    responseData.forEach(function (question) {",
							"        pm.expect(question.questionText).to.be.a('string').and.to.have.lengthOf.at.least(1, 'questionText should not be empty');",
							"    });",
							"})",
							"",
							"pm.test(\"All Question have all properties\", function () {",
							"    var question = pm.response.json();",
							"",
							"    for(let q of question) {",
							"        pm.expect(q).to.have.all.keys([\"id\", \"questionText\", \"answers\", \"answersJson\", \"explanation\", \"subCategory\", \"subCategoryId\"]);",
							"    }",
							"});",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://localhost:7214/api/Question/Questions",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"port": "7214",
					"path": [
						"api",
						"Question",
						"Questions"
					]
				}
			},
			"response": []
		},
		{
			"name": "https://localhost:7214/api/Question/PostQuestion",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response body is not null\", function () {",
							"    pm.expect(pm.response.text()).to.not.equal('null');",
							"});",
							"pm.test(\"Successful POST request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200]);",
							"});",
							"pm.test(\"Status code name has string\", function () {",
							"    pm.response.to.have.status(\"OK\");",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"id\": 1,\r\n  \"questionText\": \"what is My name?\",\r\n  \"answers\": {\r\n    \"additionalProp1\": false,\r\n    \"additionalProp2\": false,\r\n    \"additionalProp3\": true\r\n  },\r\n  \"explanation\": \"what they call me\",\r\n  \"subCategoryId\": 1\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://localhost:7214/api/Question/PostQuestion",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"port": "7214",
					"path": [
						"api",
						"Question",
						"PostQuestion"
					]
				}
			},
			"response": []
		},
		{
			"name": "https://localhost:7214/api/Question/Question/1 get by ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"Id is a non-negative integer\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData.id).to.be.a('number').and.to.satisfy((id) => id >= 0, \"Id must be a non-negative integer\");",
							"});",
							"",
							"",
							"pm.test(\"Verify that the questionText is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.questionText).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"});",
							"",
							"",
							"",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://localhost:7214/api/Question/Question/15",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"port": "7214",
					"path": [
						"api",
						"Question",
						"Question",
						"15"
					]
				}
			},
			"response": []
		},
		{
			"name": "https://localhost:7214/api/Question/UpdateQuestion/1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Status code name has string\", function () {\r",
							"    pm.response.to.have.status(\"OK\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"id\": 4,\r\n  \"questionText\": \"string\",\r\n  \"answers\": {\r\n    \"additionalProp1\": true,\r\n    \"additionalProp2\": true,\r\n    \"additionalProp3\": true\r\n  },\r\n  \"explanation\": \"string\",\r\n  \"subCategoryId\": 1\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://localhost:7214/api/Question/UpdateQuestion/4",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"port": "7214",
					"path": [
						"api",
						"Question",
						"UpdateQuestion",
						"4"
					]
				}
			},
			"response": []
		},
		{
			"name": "https://localhost:7214/api/Question/DeleteQuestion/11",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test(\"Response status code is 200\", function () {\r",
							"  pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Id field in the response should exist and be a number\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.id).to.exist.and.to.be.a('number');\r",
							"});\r",
							"\r",
							"pm.test(\"SubCategory should be null\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.have.property('subCategory').that.is.null;\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "https://localhost:7214/api/Question/DeleteQuestion/18",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"port": "7214",
					"path": [
						"api",
						"Question",
						"DeleteQuestion",
						"18"
					]
				}
			},
			"response": []
		}
	]
}