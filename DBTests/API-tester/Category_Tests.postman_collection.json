{
	"info": {
		"_postman_id": "a8d99356-fc5f-4cf0-9210-6a8b1a67bb51",
		"name": "Category Tests",
		"description": "# ðŸš€ Get started here\n\nThis template guides you through CRUD operations (GET, POST, PUT, DELETE), variables, and tests.\n\n## ðŸ”– **How to use this template**\n\n#### **Step 1: Send requests**\n\nRESTful APIs allow you to perform CRUD operations using the POST, GET, PUT, and DELETE HTTP methods.\n\nThis collection contains each of these [request](https://learning.postman.com/docs/sending-requests/requests/) types. Open each request and click \"Send\" to see what happens.\n\n#### **Step 2: View responses**\n\nObserve the response tab for status code (200 OK), response time, and size.\n\n#### **Step 3: Send new Body data**\n\nUpdate or add new data in \"Body\" in the POST request. Typically, Body data is also used in PUT request.\n\n```\n{\n    \"name\": \"Add your name in the body\"\n}\n\n ```\n\n#### **Step 4: Update the variable**\n\nVariables enable you to store and reuse values in Postman. We have created a [variable](https://learning.postman.com/docs/sending-requests/variables/) called `base_url` with the sample request [https://postman-api-learner.glitch.me](https://postman-api-learner.glitch.me). Replace it with your API endpoint to customize this collection.\n\n#### **Step 5: Add tests in the \"Tests\" tab**\n\nTests help you confirm that your API is working as expected. You can write test scripts in JavaScript and view the output in the \"Test Results\" tab.\n\n<img src=\"https://content.pstmn.io/b5f280a7-4b09-48ec-857f-0a7ed99d7ef8/U2NyZWVuc2hvdCAyMDIzLTAzLTI3IGF0IDkuNDcuMjggUE0ucG5n\">\n\n## ðŸ’ª Pro tips\n\n- Use folders to group related requests and organize the collection.\n- Add more [scripts](https://learning.postman.com/docs/writing-scripts/intro-to-scripts/) in \"Tests\" to verify if the API works as expected and execute workflows.\n    \n\n## ðŸ’¡Related templates\n\n[API testing basics](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=e9a37a28-055b-49cd-8c7e-97494a21eb54&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)  \n[API documentation](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=e9c28f47-1253-44af-a2f3-20dce4da1f18&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)  \n[Authorization methods](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=31a9a6ed-4cdf-4ced-984c-d12c9aec1c27&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "33870085"
	},
	"item": [
		{
			"name": "Get All Categories",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"All categories have properties\", function () {",
							"    var categories = pm.response.json();",
							"",
							"    Object.values(categories).forEach(function(category) {",
							"        pm.expect(category).to.have.all.keys([\"id\", \"name\", \"description\", \"segments\"]);",
							"        pm.expect(category.id).to.be.a('number');",
							"        pm.expect(category.name).to.be.a('string');",
							"        pm.expect(category.description).to.be.a('string');",
							"    });",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://localhost:7214/api/Category/Categories",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"port": "7214",
					"path": [
						"api",
						"Category",
						"Categories"
					]
				},
				"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
			},
			"response": []
		},
		{
			"name": "Post Category",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful POST request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
							"});",
							"pm.test(\"Category have correct properties\", function () {",
							"    var category = pm.response.json();",
							"",
							"    pm.expect(category).to.have.all.keys([\"id\", \"name\", \"description\", \"segments\"]);",
							"    pm.expect(category.id).to.be.a('number');",
							"    pm.expect(category.name).to.be.a('string');",
							"    pm.expect(category.description).to.be.a('string');",
							"",
							"    pm.environment.set('categoryId', category.id)",
							"    pm.environment.set('UpdateUrl', \"https://localhost:7214/api/Category/UpdateCategory/\" + category.id)",
							"    pm.environment.set('DeleteUrl', \"https://localhost:7214/api/Category/DeleteCategory/\" + category.id)",
							"    ",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"name\": \"Category Added With Postman\",\n    \"description\": \"This was added with Postman\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://localhost:7214/api/Category/PostCategory",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"port": "7214",
					"path": [
						"api",
						"Category",
						"PostCategory"
					]
				},
				"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
			},
			"response": []
		},
		{
			"name": "Get Category with Include Id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"Category have correct properties\", function () {",
							"    var category = pm.response.json();",
							"    ",
							"    pm.expect(category).to.have.all.keys([\"id\", \"name\", \"description\", \"segments\"]);",
							"    pm.expect(category.id).to.be.a('number');",
							"    pm.expect(category.name).to.be.a('string');",
							"    pm.expect(category.description).to.be.a('string');",
							"",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://localhost:7214/api/Category/CategoryInclude/{{categoryId}}",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"port": "7214",
					"path": [
						"api",
						"Category",
						"CategoryInclude",
						"{{categoryId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Category",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful PUT request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 204]);",
							"});",
							"",
							"pm.test(\"Correct updated properties\", function () {",
							"     var updatedCategory = pm.response.json();",
							"",
							"    pm.expect(updatedCategory).to.have.property('name', 'Category updated With Postman');",
							"    pm.expect(updatedCategory).to.have.property('description', 'This was updated with Postman');",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"id\": {{categoryId}},\n\t\"name\": \"Category updated With Postman\",\n    \"description\": \"This was updated with Postman\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{UpdateUrl}}",
					"host": [
						"{{UpdateUrl}}"
					]
				},
				"description": "This is a PUT request and it is used to overwrite an existing piece of data. For instance, after you create an entity with a POST request, you may want to modify that later. You can do that using a PUT request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful PUT request typically returns a `200 OK`, `201 Created`, or `204 No Content` response code."
			},
			"response": []
		},
		{
			"name": "Get Category Id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Category have correct properties\", function () {\r",
							"    var category = pm.response.json();\r",
							"    pm.expect(category).to.have.all.keys([\"id\", \"name\", \"description\", \"segments\"]);\r",
							"    pm.expect(category.id).to.be.a('number');\r",
							"    pm.expect(category.name).to.be.a('string');\r",
							"    pm.expect(category.description).to.be.a('string');\r",
							"    pm.expect(category.name).to.eq('Category updated With Postman');\r",
							"    pm.expect(category.description).to.eq('This was updated with Postman');\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://localhost:7214/api/Category/Category/{{categoryId}}",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"port": "7214",
					"path": [
						"api",
						"Category",
						"Category",
						"{{categoryId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Category",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful DELETE request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 202, 204]);",
							"});",
							"",
							"pm.sendRequest({",
							"        url: 'https://localhost:7214/api/Category/Category/' + pm.environment.get('categoryId'),",
							"        method: 'GET',",
							"        header: {",
							"            'Content-Type': 'application/json'",
							"        }",
							"    }, function (err, res) {",
							"        if (err) {",
							"            console.error(err);",
							"            return;",
							"        }",
							"        pm.expect(res.code).to.equal(404); // Check if the object is not found (404)",
							"    });"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{DeleteUrl}}",
					"host": [
						"{{DeleteUrl}}"
					]
				},
				"description": "This is a DELETE request, and it is used to delete data that was previously created via a POST request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful DELETE request typically returns a `200 OK`, `202 Accepted`, or `204 No Content` response code."
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "id",
			"value": "1"
		},
		{
			"key": "base_url",
			"value": "https://postman-rest-api-learner.glitch.me/"
		}
	]
}